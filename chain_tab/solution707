class MyLinkedList{
public:
    struct LinkedNode{
        int val;
        LinkedNode *next;
        LinkedNode(int x) : val(x), next(nullptr) {}
    };
    MyLinkedList() {
        _dummyHead = new LinkedNode(0);
        _size = 0;
    }

    int get (int index) {
        if (index < 0 || index >= _size){
            return -1;
        }
        int tmp = index;
        LinkedNode *ans = _dummyHead;
        while (tmp -- >= 0) {
            ans = ans->next;
        }
        return ans->val;
    }

    void addAtHead(int val) {
        LinkedNode *tmp = _dummyHead->next;
        _dummyHead->next = new LinkedNode(val);
        _dummyHead->next->next = tmp;
        ++ _size;
    }
    
    void addAtTail(int val) {
        LinkedNode *cur = _dummyHead;
        while (cur->next != nullptr){
            cur = cur->next;
        }
        cur->next = new LinkedNode(val);
        ++ _size;
    }

    void addAtIndex(int index, int val) {
        if (index < _size && index >= 0){
            LinkedNode *cur = _dummyHead;
            while (index -- > 0) {
                cur = cur->next;
            }
            LinkedNode *tmp = cur->next;
            cur->next = new LinkedNode(val);
            cur->next->next = tmp;
            ++ _size;
        }else if (index == _size){
            addAtTail(val);
        }else if (index > _size){
            return ;
        }
    }
    
    void deleteAtIndex(int index) {
        if (index < _size && index >= 0){
            LinkedNode *cur = _dummyHead;
            while (index -- > 0) {
                cur = cur->next;
            }
            LinkedNode *tmp = cur->next;
            cur->next = tmp->next;
            delete tmp;
        }else {
            return ;
        }
        -- _size;
    }
    
    void display () {
        do_display();
    }
private:
    int _size;
    LinkedNode *_dummyHead;
    void do_display () const {
        LinkedNode *head = _dummyHead->next;
        while (head != nullptr){
            std::cout << head->val << "; "; 
            head = head->next;
        }
        std::cout << std::endl;
    }
};